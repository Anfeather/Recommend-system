import numpy as np
import math

def lfm(a,k):
    """
    :param a: 表示需要分解的评价矩阵
    :param k: 分解的属性（隐变量）个数
    :return: 
    """
    assert type(a)==np.ndarray
    m,n=a.shape
    alpha=0.01
    lambda_=0.01
    u=np.random.rand(m,k)
    v=np.random.randn(k,n)
    #print("u:",u)
    #print("v:",v)
    for t in range(1000):
        for i in range(m):
            for j in range(n):
                if math.fabs(a[i][j])>1e-4:
                    err=a[i][j]-np.dot(u[i],v[:,j])
                    for r in range(k):
                        gu=err*v[r][j]-lambda_*u[i][r]
                        gv=err*u[i][r]-lambda_*v[r][j]
                        u[i][r]+=alpha*gu
                        v[r][j]+=alpha*gv
    return u,v

A = np.array([[5,5,0,5],[5,0,3,4],[3,4,0,3],[0,0,5,3],[5,4,4,5],[5,4,5,5]])
b,c = lfm(A,3)
